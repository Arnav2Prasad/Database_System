              Intermediate SQL

            Join Expressions

In all of the example queries we used in Chapter 3 (except when we used set operations),
we combined information from multiple relations using the Cartesian product
operator. In this section, we introduce a number of “join” operations that allow the
programmer to write some queries in a more natural way and to express some queries
that are difficult to do with only the Cartesian product.


            The Natural Join
            
Consider the following SQL query, which computes for each student the set of courses
a student has taken:

            select name, course id
            from student, takes
            where student.ID = takes.ID;

Note that this query outputs only students who have taken some course. Students who
have not taken any course are not output.


Note that in the student and takes table, the matching condition required student.ID
to be equal to takes.ID. 
These are the only attributes in the two relations that have the
same name. 

In fact, this is a common case; that is, the matching condition in the from
clause most often requires all attributes with matching names to be equated.

To make the life of an SQL programmer easier for this common case, SQL supports
an operation called the natural join, which we describe below. 

In fact, SQL supports several other ways in which information from two or more relations can be joined together.
We have already seen how a Cartesian product along with a where clause predicate can
be used to join information from multiple relations. 

The natural join operation operates on two relations and produces a relation as the
result. 
Unlike the Cartesian product of two relations, which concatenates each tuple of
the first relation with every tuple of the second, natural join considers only those pairs
of tuples with the same value on those attributes that appear in the schemas of both
relations. So, going back to the example of the relations student and takes, computing:
student natural join takes
considers only those pairs of tuples where both the tuple from student and the tuple
from takes have the same value on the common attribute, ID.


Notice that we do not repeat those attributes that appear in the schemas of both relations;
rather they appear only once. Notice also the order in which the attributes are listed:
          first the attributes common to the schemas of both relations
          second those attributes unique to the schema of the first relation and 
          finally, those attributes unique to the  schema of the second relation.
Earlier we wrote the query “For all students in the university who have taken some
course, find their names and the course ID of all courses they took” as:
          
          select name, course id
          from student, takes
          where student.ID = takes.ID;

This query can be written more concisely using the natural-join operation in SQL as:

              select name, course id
              from student natural join takes;
              
Both of the above queries generate the same result.

The result of the natural join operation is a relation. 

Conceptually, expression “student natural join takes” in the from clause is replaced by the 
relation obtained by evaluating the natural join. The where and select clauses are then evaluated on this relation.
A from clause in an SQL query can have multiple relations combined using natural
join, as shown here:
                
                select A1, A2, …, An
                from r1 natural join r2 natural join ... natural join rm
                where P;


More generally, a from clause can be of the form

            from E1, E2,..., En
            
where each Ei can be a single relation or an expression involving natural joins. 

For example, suppose we wish to answer the query “List the names of students along with
the titles of courses that they have taken.” The query can be written in SQL as follows:
              
              select name, title
              from student natural join takes, course
              where takes.course_id = course.course_id;

The natural join of student and takes is first computed, as we saw earlier, and a Cartesian
product of this result with course is computed, from which the where clause extracts
only those tuples where the course identifier from the join result matches the course
identifier from the course relation. 

Note that takes.course id in the where clause refers
to the course_id field of the natural join result, since this field, in turn, came from the
takes relation.
In contrast, the following SQL query does not compute the same result:
              
              select name, title
              from student natural join takes natural join course;

To see why, note that the natural join of student and takes contains the attributes (ID,
name, dept name, tot cred, course id, sec id), while the course relation contains 
the attributes (course_id, title, dept name, credits). As a result, the natural join would require
that the dept_name attribute values from the two relations be the same in addition to
requiring that the course id values be the same. 
This query would then omit all (student_name, course_title) pairs where the student takes a course in a department other
than the student’s own department. The previous query, on the other hand, correctly
outputs such pairs.

To provide the benefit of natural join while avoiding the danger of equating attributes erroneously, 
SQL provides a form of the natural join construct that allows you
to specify exactly which columns should be equated. This feature is illustrated by the
following query:
            
            select name, title
            from (student natural join takes) join course using (course id);

The operation " join … using " requires a list of attribute names to be specified. Both
relations being joined must have attributes with the specified names. 
Consider the operation r1 join r2 using(A1, A2). The operation is similar to r1 natural join r2, except that
a pair of tuples t1 from r1 and t2 from r2 match if t1.A1 = t2.A1 and t1.A2 = t2.A2; even
if r1 and r2 both have an attribute named A3, it is not required that t1.A3 = t2.A3.

Thus, in the preceding SQL query, the join construct permits student.dept_name and
course.dept_name to differ, and the SQL query gives the correct answer.


                          Join Conditions
we saw how to express natural joins, and we saw the join … using
clause, which is a form of natural join that requires values to match only on specified
attributes. 

SQL supports another form of join, in which an arbitrary join condition can be specified.

The " on " condition allows a general predicate over the relations being joined. This
predicate is written like a where clause predicate except for the use of the keyword on
rather than where. 
Like the using condition, the on condition appears at the end of the join expression.

Consider the following query, which has a join expression containing the on condition:
              
              select *
              from student join takes on student.ID = takes.ID;

The " on " condition above specifies that a tuple from student matches a tuple from takes
if their ID values are equal. 
The join expression in this case is almost the same as the
join expression student natural join takes, since the natural join operation also requires
that for a student tuple and a takes tuple to match. 
The one difference is that the result
has the ID attribute listed twice, in the join result, once for student and once for takes,
even though their ID values must be the same.
In fact, the preceding query is equivalent to the following query:
                      select *
                      from student, takes
                      where student.ID = takes.ID;   

As we have seen earlier, the relation name is used to disambiguate the attribute name ID,
and thus the two occurrences can be referred to as student.ID and takes.ID, respectively.

A version of this query that displays the ID value only once is as follows:
            
            select student.ID as ID, name, dept name, tot cred,
            course id, sec id, semester, year, grade
            from student join takes on student.ID = takes.ID;

The result of this query is exactly the same as the result of the natural join of student
and takes.

The " on " condition can express any SQL predicate, and thus join expressions using
the on condition can express a richer class of join conditions than natural join. However,
as illustrated by our preceding example, a query using a join expression with an " on "
condition can be replaced by an equivalent expression without the " on " condition, with
the predicate in the " on " clause moved to the " where " clause. 

Thus, it may appear that the on condition is a redundant feature of SQL.

However, there are two good reasons for introducing the on condition:
      1. For a kind of join called an outer join, "on" conditions do behave
          in a manner different from where conditions. 
      2. an SQL query is often more readable by humans if the join condition is 
        specified in the on clause and the rest of the conditions appear in the where clause.   


                 Outer Joins        
Suppose we wish to display a list of all students, displaying their ID, and name, dept
name, and tot cred, along with the courses that they have taken. The following SQL
query may appear to retrieve the required information:

              select *
              from student natural join takes;
              
Unfortunately, the above query does not work quite as intended. 

Suppose that there is some student who takes no courses. 
Then the tuple in the student relation for that
particular student would not satisfy the condition of a natural join with any tuple in the
takes relation, and that student’s data would not appear in the result. We would thus
not see any information about students who have not taken any courses. 

For example, in the student and takes relations, note that student Snow,
with ID 70557, has not taken any courses. Snow appears in student, but Snow’s ID
number does not appear in the ID column of takes. Thus, Snow does not appear in the
result of the natural join.

More generally, some tuples in either or both of the relations being joined may
be “lost” in this way. The outer-join operation works in a manner similar to the join
operations we have already studied, but it preserves those tuples that would be lost in
a join by creating tuples in the result containing null values.

For example, to ensure that the student named Snow from our earlier example appears in the 
result, a tuple could be added to the join result with all attributes from the
student relation set to the corresponding values for the student Snow, and all the remaining 
attributes which come from the takes relation, namely, course id, sec id, semester,
and year, set to null. Thus, the tuple for the student Snow is preserved in the result of
the outer join.


There are three forms of outer join:
1. The left outer join preserves tuples only in the relation named before (to the left
of) the left outer join operation.

2. The right outer join preserves tuples only in the relation named after (to the right
of) the right outer join operation.

3. The full outer join preserves tuples in both relations.

In contrast, the join operations we studied earlier that do not preserve nonmatched 
tuples are called inner-join operations, to distinguish them from the outer-join operations.

We now explain exactly how each form of outer join operates. 
We can compute the left outer-join operation as follows: 
1. compute the result of the inner join as before. 
2. Then, for every tuple t in the left-hand-side relation that does not match any
    tuple in the right-hand-side relation in the inner join, add a tuple r to the result of the
    join constructed as follows:
    
        • The attributes of tuple r that are derived from the left-hand-side relation are filled
        in with the values from tuple t.
        • The remaining attributes of r are filled with null values.
                
                select *
                from student natural left outer join takes;

That result includes student Snow (ID 70557), unlike the result of an inner join, but
the tuple for Snow includes nulls for the attributes that appear only in the schema of
the takes relation.

As another example of the use of the outer-join operation, we can write the query
“Find all students who have not taken a course” as:
            
            select ID
            from student natural left outer join takes
            where course id is null;
            
The right outer join is symmetric to the left outer join. 
Tuples from the right-handside relation that do not match any tuple in the left-hand-side relation are padded with
nulls and are added to the result of the right outer join. Thus, if we rewrite the preceding
query using a right outer join and swapping the order in which we list the relations as
follows:

            select *
            from takes natural right outer join student;
            
we get the same result except for the order in which the attributes appear in the result


The full outer join is a combination of the left and right outer-join types. After the
operation computes the result of the inner join, it extends with nulls those tuples from
the left-hand-side relation that did not match with any from the right-hand-side relation
and adds them to the result. Similarly, it extends with nulls those tuples from the righthand-side 
relation that did not match with any tuples from the left-hand-side relation
and adds them to the result. 

Said differently, full outer join is the union of a left outer join and the corresponding right outer join

As an example of the use of full outer join, consider the following query: “Display
a list of all students in the Comp. Sci. department, along with the course sections, if
any, that they have taken in Spring 2017; all course sections from Spring 2017 must
be displayed, even if no student from the Comp. Sci. department has taken the course
section.” 
This query can be written as:
          
          select *
          from (select *
                from student
                where dept name = 'Comp. Sci.')
                natural full outer join
                (select *
                from takes
                where semester = 'Spring' and year = 2017);


The "on" clause can be used with outer joins. 
The following query is identical to the first query we saw 
using “student natural left outer join takes,” except that the attribute
ID appears twice in the result.
          
          select *
          from student left outer join takes on student.ID = takes.ID;

As we noted earlier, "on" and "where" behave differently for outer join. The reason
for this is that outer join adds null-padded tuples only for those tuples that do not
contribute to the result of the corresponding “inner” join. The "on" condition is part of
the outer join specification, but a "where" clause is not. 
In our example, the case of the student tuple for student “Snow” with 
ID 70557, illustrates this distinction. Suppose we
modify the preceding query by moving the on clause predicate to the where clause and
instead using an on condition of true.

              select *
              from student left outer join takes on true
              where student.ID = takes.ID;

The earlier query, using the left outer join with the on condition, includes a tuple
(70557, Snow, Physics, 0, null, null, null, null, null, null ) because there is no tuple
in takes with ID = 70557. 
In the latter query, however, every tuple satisfies the join
condition true, so no null-padded tuples are generated by the outer join. The outer join
actually generates the Cartesian product of the two relations. Since there is no tuple
in takes with ID = 70557, every time a tuple appears in the outer join with name =
“Snow”, the values for student.ID and takes.ID must be different, and such tuples would
be eliminated by the where clause predicate. Thus, student Snow never appears in the
result of the latter query.


            Join Types and Conditions
To distinguish normal joins from outer joins, normal joins are called inner joins in SQL.

A join clause can thus specify inner join instead of outer join to specify that a normal
join is to be used. The keyword "inner" is, however, optional. 

The default join type, when the join clause is used without the outer prefix, is the inner join. 
Thus,
            
            select *
            from student join takes using (ID);

is equivalent to:
            
            select *
            from student inner join takes using (ID);
            
Similarly, natural join is equivalent to natural inner join.
          

              Views
It is not always desirable for all users to see the entire set of relations in the database.

we shall see how to use the SQL authorization mechanism to restrict
access to relations, but security considerations may require that only certain data in a
relation be hidden from a user. 

Consider a clerk who needs to know an instructor’s ID, name, and department_name, but does 
not have authorization to see the instructor’s
salary amount. This person should see a relation described in SQL by:
                  
                  select ID, name, dept name
                  from instructor;

Aside from security concerns, we may wish to create a personalized collection of “virtual” relations 
that is better matched to a certain user’s intuition of the structure of the
enterprise. 

In our university example, we may want to have a list of all course sections
offered by the Physics department in the Fall 2017 semester, with the building and
room number of each section. The relation that we would create for obtaining such a
list is:
            
            select course.course id, sec id, building, room number
            from course, section
            where course.course id = section.course id
            and course.dept name = 'Physics'
            and section.semester = 'Fall'
            and section.year = 2017;


It is possible to compute and store the results of these queries and then make the
stored relations available to users. 
However, if we did so, and the underlying data in the
relations instructor, course, or section changed, the stored query results would then no
longer match the result of reexecuting the query on the relations. 

In general, it is a bad idea to compute and store query results such as those in 
the above examples (although there are some exceptions that we study later).

Instead, SQL allows a “virtual relation” to be defined by a query, and the relation
conceptually contains the result of the query. The virtual relation is not precomputed
and stored but instead is computed by executing the query whenever the virtual relation
is used. 

We saw a feature for this, where we described the "with" clause.
The "with" clause allows us to to assign a name to a subquery for use as often as desired,
but in one particular query only. 
Here, we present a way to extend this concept beyond a single query by defining a view. 
It is possible to support a large number of views on top of any given set of actual relations.



                      View Definition
We define a view in SQL by using the create view command. 

To define a view, we must give the view a name and must state the query that computes the view. 
The form of the create view command is:
          create view v as <query expression>;

where <query expression> is any legal query expression. The view name is represented
by v.

Consider again the clerk who needs to access all data in the instructor relation,
except salary. The clerk should not be authorized to access the instructor relation (we
see in Section 4.7, how authorizations can be specified). Instead, a view relation faculty
can be made available to the clerk, with the view defined as follows:
          
          create view faculty as
          select ID, name, dept_name
          from instructor;

As explained earlier, the view relation conceptually contains the tuples in the query
result, but it is 
        not precomputed and stored. 
        
Instead, the database system stores the query expression associated with the view relation. 
Whenever the view relation is accessed, its tuples are created by computing the query result. Thus, the view relation is
created whenever needed, on demand.

To create a view that lists all course sections offered by the Physics department in
the Fall 2017 semester with the building and room number of each section, we write:

          create view physics_fall_2017 as
            select course.course id, sec id, building, room number
            from course, section
            where course.course id = section.course id
                    and course.dept name = 'Physics'
                    and section.semester = 'Fall'
                    and section.year = 2017;

Later, when we study the SQL authorization mechanism in Section 4.7, we shall see
that users can be given access to views in place of, or in addition to, access to relations.

Views differ from the "with" statement in that views, once created, remain available
until explicitly dropped. The named subquery defined by with is local to the query in
which it is defined.            


                Using Views in SQL Queries
Once we have defined a view, we can use the view name to refer to the virtual relation
that the view generates. Using the view physics_fall_2017, we can find all Physics courses
offered in the Fall 2017 semester in the Watson building by writing:
            
            select course_id
            from physics fall 2017
            where building = 'Watson';
            
View names may appear in a query any place where a relation name may appear,

The attribute names of a view can be specified explicitly as follows:
        
        create view departments_total_salary(dept name, total salary) as
        select dept name, sum (salary)
        from instructor
        group by dept name;


The preceding view gives for each department the sum of the salaries of all the instructors at that department. 
Since the expression sum(salary) does not have a name, the
attribute name is specified explicitly in the view definition.
Intuitively, at any given time, the set of tuples in the view relation is the result
of evaluation of the query expression that defines the view. 

Thus, if a view relation is computed and stored, it may become out of date if the relations used to define it are
modified. 

To avoid this, views are usually implemented as follows: 
        When we define a
        view, the database system stores the definition of the view itself, rather than the result
        of evaluation of the query expression that defines the view. Wherever a view relation
        appears in a query, it is replaced by the stored query expression. Thus, whenever we
        evaluate the query, the view relation is recomputed.
        
One view may be used in the expression defining another view. 
For example, we can define a view physics_fall_2017_watson that lists the course_ID and room_number of
all Physics courses offered in the Fall 2017 semester in the Watson building as follows:
            
            create view physics_fall_2017_watson as
                select course_id, room_number
                from physics_fall_2017
                where building = 'Watson';

where physics_fall_2017_watson is itself a view relation. 
This is equivalent to:
        
        create view physics_fall_2017_watson as
            select course_id, room_number
            from (select course.course_id, building, room_number
                from course, section
                where course.course_id = section.course_id
                      and course.dept_name = 'Physics'
                      and section.semester = 'Fall'
                      and section.year = 2017)
                where building = 'Watson';


            Materialized Views
Certain database systems allow view relations to be stored, but they make sure that, if
the actual relations used in the view definition change, the view is kept up-to-date. Such
views are called materialized views.

For example, consider the view departments total salary. 
If that view is materialized, its results would be stored in the database, allowing queries that use the view to
potentially run much faster by using the precomputed view result, instead of recomputing it.
However, if an instructor tuple is added to or deleted from the instructor relation,
the result of the query defining the view would change, and as a result the materialized
view’s contents must be updated. Similarly, if an instructor’s salary is updated, the
tuple in departments total salary corresponding to that instructor’s department must
be updated.            

The process of keeping the materialized view up-to-date is called materialized view
maintenance (or often, just view maintenance) and is covered in Section 16.5. 

View maintenance can be done immediately when any of the relations on which the view is
defined is updated. 
Some database systems, however, perform view maintenance lazily,
when the view is accessed. 
Some systems update materialized views only periodically;
in this case, the contents of the materialized view may be stale, that is, not up-to-date,
when it is used, and it should not be used if the application needs up-to-date data.
And some database systems permit the database administrator to control which of the
preceding methods is used for each materialized view.

Applications that use a view frequently may benefit if the view is materialized.
Applications that demand fast response to certain queries that compute aggregates over
large relations can also benefit greatly by creating materialized views corresponding to
the queries. In this case, the aggregated result is likely to be much smaller than the
large relations on which the view is defined; as a result the materialized view can be
used to answer the query very quickly, avoiding reading the large underlying relations.
The benefits to queries from the materialization of a view must be weighed against the
storage costs and the added overhead for updates.

SQL does not define a standard way of specifying that a view is materialized,
but many database systems provide their own SQL extensions for this task. Some
database systems always keep materialized views up-to-date when the underlying relations 
change, while others permit them to become out of date and periodically recompute them.


        
             Update of a View
Although views are a useful tool for queries, they present serious problems if we express
updates, insertions, or deletions with them. The difficulty is that a modification to the
database expressed in terms of a view must be translated to a modification to the actual
relations in the logical model of the database.

Suppose the view faculty, which we saw earlier, is made available to a clerk. Since
we allow a view name to appear wherever a relation name is allowed, the clerk can
write:
          
          insert into faculty
          values ('30765', 'Green', 'Music');

This insertion must be represented by an insertion into the relation instructor, since
instructor is the actual relation from which the database system constructs the view
faculty. However, to insert a tuple into instructor, we must have some value for salary.

There are two reasonable approaches to dealing with this insertion:
• Reject the insertion, and return an error message to the user.
• Insert a tuple ('30765', 'Green', 'Music', null) into the instructor relation.

Another problem with modification of the database through views occurs with a
view such as:
        create view instructor_info as
        select ID, name, building
        from instructor, department
        where instructor.dept_name = department.dept_name;

This view lists the ID, name, and building-name of each instructor in the university.
Consider the following insertion through this view:
        
        insert into instructor_info
        values ('69987', 'White', 'Taylor');

Suppose there is no instructor with ID 69987, and no department in the Taylor
building. Then the only possible method of inserting tuples into the instructor and 
department relations is to insert ('69987', 'White', null, null) into instructor and (null,
'Taylor', null) into department. Then we obtain the relations. 

However, this update does not have the desired effect, since the view relation instructor info
still does not include the tuple ('69987', 'White', 'Taylor'). 
Thus, there is no way to update the relations instructor and department by using nulls to get the desired update on
instructor info.

Because of problems such as these, modifications are generally not permitted on
view relations, except in limited cases. Different database systems specify 
different conditions under which they permit updates on view relations; see the database system
manuals for details.

In general, an SQL view is said to be updatable (i.e., inserts, updates, or deletes can
be applied on the view) if the following conditions are all satisfied by the query defining
the view:
    1. The from clause has only one database relation.
    2. The select clause contains only attribute names of the relation and does not have
    any expressions, aggregates, or distinct specification.
    3. Any attribute not listed in the select clause can be set to null; that is, it does not
    have a not null constraint and is not part of a primary key.
    4. The query does not have a group by or having clause.

Under these constraints, the update, insert, and delete operations would be allowed on
the following view:
        
        create view history_instructors as
        select *
        from instructor
        where dept name = 'History';
        
Even with the conditions on updatability, the following problem still remains. 
Suppose that a user tries to insert the tuple ('25566', 'Brown', 'Biology', 100000) into the
history instructors view. 
This tuple can be inserted into the instructor relation, but it
would not appear in the history instructors view since it does not satisfy the selection
imposed by the view.

By default, SQL would allow the above update to proceed. 
However, views can be defined with a "with check option" clause at the end of the view definition; then, if a tuple
inserted into the view does not satisfy the view’s where clause condition, the insertion
is rejected by the database system. Updates are similarly rejected if the new value does
not satisfy the where clause conditions.

An alternative, and often preferable, approach to modifying the database through a
view is to use the trigger mechanism discussed in Section 5.3. The "instead of" feature in
declaring triggers allows one to replace the default insert, update, and delete operations
on a view with actions designed especially for each particular case.




















