                      Transactions

A transaction consists of a sequence of query and/or update statements. 
The SQL standard specifies that a transaction begins implicitly when an SQL statement is executed.

One of the following SQL statements must end the transaction:
    • "Commit work" commits the current transaction; that is, it makes the updates performed 
    by the transaction become permanent in the database. After the transaction is committed, a new 
    transaction is automatically started.
    
    • "Rollback work" causes the current transaction to be rolled back; that is, it undoes
    all the updates performed by the SQL statements in the transaction. Thus, the
    database state is restored to what it was before the first statement of the transaction
    was executed.
    
The keyword "work" is optional in both the statements.

Transaction rollback is useful if some error condition is detected during execution
of a transaction. Commit is similar, in a sense, to saving changes to a document that
is being edited, while rollback is similar to quitting the edit session without saving
changes. 
Once a transaction has executed commit work, its effects can no longer be
undone by rollback work. The database system guarantees that in the event of some
failure, such as an error in one of the SQL statements, a power outage, or a system
crash, a transaction’s effects will be rolled back if it has not yet executed commit work.
In the case of power outage or other system crash, the rollback occurs when the system
restarts.

For instance, consider a banking application where we need to transfer money
from one bank account to another in the same bank. To do so, we need to update
two account balances, subtracting the amount transferred from one, and adding it to
the other. If the system crashes after subtracting the amount from the first account
but before adding it to the second account, the bank balances will be inconsistent. A
similar problem occurs if the second account is credited before subtracting the amount
from the first account and the system crashes just after crediting the amount.

As another example, consider our running example of a university application. We
assume that the attribute tot_cred of each tuple in the student relation is kept up-todate 
by modifying it whenever the student successfully completes a course. To do so,
whenever the takes relation is updated to record successful completion of a course by a
student (by assigning an appropriate grade), the corresponding student tuple must also
be updated. If the application performing these two updates crashes after one update
is performed, but before the second one is performed, the data in the database will be
inconsistent.

By either committing the actions of a transaction after all its steps are completed,
or rolling back all its actions in case the transaction could not complete all its actions
successfully, the database provides an abstraction of a transaction as being atomic, that
is, indivisible. Either all the effects of the transaction are reflected in the database or
none are (after rollback).

Applying the notion of transactions to the above applications, the update statements should be 
executed as a single transaction. An error while a transaction executes
one of its statements would result in undoing the effects of the earlier statements of the
transaction so that the database is not left in a partially updated state.

If a program terminates without executing either of these commands, the updates
are either committed or rolled back. The standard does not specify which of the two
happens, and the choice is implementation dependent.

In many SQL implementations, including MySQL and PostgreSQL, by default each
SQL statement is taken to be a transaction on its own, and it gets committed as soon
as it is executed. Such automatic commit of individual SQL statements must be turned
off if a transaction consisting of multiple SQL statements needs to be executed. How
to turn off automatic commit depends on the specific SQL implementation, although
many databases support the command set autocommit off.

A better alternative, which is part of the SQL:1999 standard is to allow multiple SQL
statements to be enclosed between the keywords begin atomic … end. All the statements
between the keywords then form a single transaction, which is committed by default if
execution reaches the end statement. 
Only some databases, such as SQL Server, support the above syntax. 
However, several other databases, such as MySQL and PostgreSQL,
support a begin statement which starts a transaction containing all subsequent SQL
statements, but do not support the end statement; instead, the transaction must be
ended by either a commit work or a rollback work command.

If you use a database such as Oracle, where the automatic commit is not the default
for DML statements, be sure to issue a commit command after adding or modifying
data, or else when you disconnect, all your database modifications will be rolled back!
You should be aware that although Oracle has automatic commit turned off by default,
that default may be overridden by local configuration settings.


                  Integrity Constraints
Integrity constraints ensure that changes made to the database by authorized users
do not result in a loss of data consistency. Thus, integrity constraints guard against
accidental damage to the database. 
This is in contrast to security constraints, which guard against access to the database by unauthorized users.

Examples of integrity constraints are:
• An instructor name cannot be null.
• No two instructors can have the same instructor ID.
• Every department name in the course relation must have a matching department
    name in the department relation.
• The budget of a department must be greater than $0.00.

In general, an integrity constraint can be an arbitrary predicate pertaining to the
database. However, arbitrary predicates may be costly to test. Thus, most database
systems allow one to specify only those integrity constraints that can be tested with
minimal overhead.

We have already seen some forms of integrity constraints in Section 3.2.2. We study
some more forms of integrity constraints in this section. In Chapter 7, we study another
form of integrity constraint, called functional dependencies, that is used primarily in the
process of schema design.

Integrity constraints are usually identified as part of the database schema design
process and declared as part of the create table command used to create relations.
However, integrity constraints can also be added to an existing relation by using the
command alter table table-name add constraint, where constraint can be any constraint
on the relation. 

      When such a command is executed, the system first ensures that the relation satisfies the specified constraint. 
      If it does, the constraint is added to the relation; if not, the command is rejected.

                     Constraints on a Single Relation
We described in Section 3.2 how to define tables using the create table command. 

The create table command may also include integrity-constraint statements. In addition to
the primary-key constraint, there are a number of other ones that can be included in
the create table command. The allowed integrity constraints include
              
              • not null
              • unique
              • check(<predicate>)
              
We cover each of these types of constraints in the following sections.

                  Not Null Constraint
the null value is a member of all domains, and as a result
it is a legal value for every attribute in SQL by default. 

For certain attributes, however, null values may be inappropriate. 
Consider a tuple in the student relation where name is null. 
Such a tuple gives student information for an unknown student; thus, it does not
contain useful information. Similarly, we would not want the department budget to be
null. In cases such as this, we wish to forbid null values, and we can do so by restricting
the domain of the attributes name and budget to exclude null values, by declaring it as
follows:
        
        name varchar(20) not null
        budget numeric(12,2) not null
        
The not null constraint prohibits the insertion of a null value for the attribute, and is
an example of a domain constraint. 
Any database modification that would cause a null
to be inserted in an attribute declared to be not null generates an error diagnostic.
There are many situations where we want to avoid null values. In particular, SQL
prohibits null values in the primary key of a relation schema. Thus, in our university
example, in the department relation, if the attribute dept_name is declared as the primary
key for department, it cannot take a null value. As a result it would not need to be
declared explicitly to be not null.    


                  Unique Constraint
SQL also supports an integrity constraint:

    unique (A.....Am)

The unique specification says that attributes A..Am
form a superkey; that is, no
two tuples in the relation can be equal on all the listed attributes. However, attributes
declared as "unique" are permitted to be null unless they have explicitly been declared to
be not null. Recall that a null value does not equal any other value. (The treatment of
nulls here is the same as that of the unique construct defined in Section 3.8.4.)


                The Check Clause
When applied to a relation declaration, the clause check(P) specifies a predicate P that
must be satisfied by every tuple in a relation.
A common use of the check clause is to ensure that attribute values satisfy specified conditions, 
in effect creating a powerful type system. For instance, a clause check
(budget > 0) in the create table command for relation department would ensure that the
value of budget is nonnegative.

As another example, consider the following:
            
            create table section
              (course_id varchar (8),
              sec_id varchar (8),
              semester varchar (6),
              year numeric (4,0),
              building varchar (15),
              room_number varchar (7),
              time_slot_id varchar (4),
              primary key (course id, sec id, semester, year),
              check (semester in ('Fall', 'Winter', 'Spring', 'Summer')));

Here, we use the check clause to simulate an enumerated type by specifying that
semester must be one of 'Fall', 'Winter', 'Spring', or 'Summer'. Thus, the check clause
permits attribute domains to be restricted in powerful ways that most programming 
language type systems do not permit.

Null values present an interesting special case in the evaluation of a check clause.

A check clause is satisfied if it is not false, so clauses that evaluate to unknown are not
violations. If null values are not desired, a separate not null constraint must be specified.
A check clause may appear on its own, as shown above, or as part of the declaration
of an attribute.

        create table department
          (dept name varchar (20),
          building varchar (15),
          budget numeric (12,2) check (budget > 0),
          primary key (dept name));

The placement of a check clause is a matter of coding style. 

Typically, constraints on the value of a single attribute are listed with that
attribute, while more complex check clauses are listed separately at the end of a create
table statement.

The predicate in the check clause can, according to the SQL standard, be an arbitrary 
predicate that can include a subquery. However, currently none of the widely
used database products allows the predicate to contain a subquery.


              Referential Integrity
Often, we wish to ensure that a value that appears in one relation (the referencing relation) 
for a given set of attributes also appears for a certain set of attributes in another
relation (the referenced relation). 
As we saw earlier, in Section 2.3, such conditions are called referential integrity constraints, and 
foreign keys are a form of a referential integrity constraint where the referenced 
attributes form a primary key of the referenced relation.

Foreign keys can be specified as part of the SQL create table statement by using the
foreign key clause. 
We illustrate foreign-key declarations by using the SQL DDL definition of part of our university database.

The definition of the course table has a declaration
      
      “foreign key (dept_name) references department”
      
This foreign-key declaration specifies that for each course tuple, the department_name
specified in the tuple must exist in the department relation. Without this constraint, it
is possible for a course to specify a nonexistent department name.
By default, in SQL a foreign key references the primary-key attributes of the referenced table. 

SQL also supports a version of the references clause where a list of attributes of the 
referenced relation can be specified explicitly. 

For example, the foreign key declaration for the course relation can be specified as:
     
      foreign key (dept_name) references department(dept_name)
      
The specified list of attributes must, however, be declared as a superkey of the
referenced relation, using 
          either a primary key constraint 
          or a unique constraint. 

A more general form of a referential-integrity constraint, where the referenced columns
need not be a candidate key, cannot be directly specified in SQL. The SQL standard
specifies other constructs that can be used to implement such constraints, which are
described later; however, these alternative constructs are not supported by
any of the widely used database systems.

Note that the foreign key must reference a compatible set of attributes, that is, the
          number of attributes must be the same 
          and the data types of corresponding attributes must be compatible.

We can use the following as part of a table definition to declare that an attribute
forms a foreign key:

      dept_name varchar(20) references department

When a referential-integrity constraint is violated, the normal procedure is to reject
the action that caused the violation (i.e., the transaction performing the update action
is rolled back). However, a foreign key clause can specify that if a delete or update action
on the referenced relation violates the constraint, then, instead of rejecting the action,
the system must take steps to change the tuple in the referencing relation to restore the
constraint. 

Consider this definition of an integrity constraint on the relation course:
                
                create table course
                ( …
                foreign key (dept_name) references department
                      on delete cascade
                      on update cascade,
                … );

Because of the clause on delete cascade associated with the foreign-key declaration, if a
delete of a tuple in department results in this referential-integrity constraint being vio-
lated, the system does not reject the delete. 
Instead, the delete “cascades” to the course relation, deleting the tuple that 
refers to the department that was deleted. Similarly, the
system does not reject an update to a field referenced by the constraint if it violates the
constraint; instead, the system updates the field dept_name in the referencing tuples in
course to the new value as well. SQL also allows the foreign key clause to specify actions
other than cascade, if the constraint is violated: The referencing field (here, dept_name)
can be set to null (by using set null in place of cascade), or to the default value for the
domain (by using set default).

If there is a chain of foreign-key dependencies across multiple relations, a deletion
or update at one end of the chain can propagate across the entire chain. 

An interesting case where the foreign key constraint on a relation 
references the same relation appears in Exercise 4.9. 

If a cascading update or delete causes a constraint violation that cannot
be handled by a further cascading operation, the system aborts the transaction. As a
result, all the changes caused by the transaction and its cascading actions are undone.

Null values complicate the semantics of referential-integrity constraints in SQL .
Attributes of foreign keys are allowed to be null, provided that they have not otherwise
been declared to be not null. If all the columns of a foreign key are non-null in a given
tuple, the usual definition of foreign-key constraints is used for that tuple. If any of the
foreign-key columns is null, the tuple is defined automatically to satisfy the constraint.
This definition may not always be the right choice, so SQL also provides constructs that
allow you to change the behavior with null values; we do not discuss the constructs here.


                      Assigning Names to Constraints
It is possible for us to assign a name to integrity constraints. 
Such names are useful if we want to drop a constraint that was defined previously.

To name a constraint, we precede the constraint with the keyword constraint and
the name we wish to assign it. 

So, for example, if we wish to assign the name minsalary to the check constraint on 
the salary attribute of instructor (see Figure 4.9), we would
modify the declaration for salary to:
              
              salary numeric(8,2), constraint minsalary check (salary > 29000),

Later, if we decide we no longer want this constraint, we can write:
              
              alter table instructor drop constraint minsalary;

Lacking a name, we would need first to use system-specific features to identify the
system-assigned name for the constraint. Not all systems support this, but, for example,
in Oracle, the system table user constraints contains this information

                
              Integrity Constraint Violation During a Transaction
Transactions may consist of several steps, and integrity constraints may be violated
temporarily after one step, but a later step may remove the violation. 

For instance, suppose we have a relation person with primary key name, and an attribute spouse, and
suppose that spouse is a foreign key on person. That is, the constraint says that the spouse
attribute must contain a name that is present in the person table. Suppose we wish to
note the fact that John and Mary are married to each other by inserting two tuples,
one for John and one for Mary, in the preceding relation, with the spouse attributes
set to Mary and John, respectively. The insertion of the first tuple would violate the
foreign-key constraint, regardless of which of the two tuples is inserted first. After the
second tuple is inserted, the foreign-key constraint would hold again.

To handle such situations, the SQL standard allows a clause initially deferred to
be added to a constraint specification; the constraint would then be checked at the
end of a transaction and not at intermediate steps. A constraint can alternatively be
specified as deferrable, which means it is checked immediately by default but can be
deferred when desired. For constraints declared as deferrable, executing a statement
set constraints constraint-list deferred as part of a transaction causes the checking of
the specified constraints to be deferred to the end of that transaction. Constraints that
are to appear in a constraint list must have names assigned. The default behavior is
to check constraints immediately, and many database implementations do not support
deferred constraint checking.

We can work around the problem in the preceding example in another way, if the
spouse attribute can be set to null: We set the spouse attributes to null when inserting the
tuples for John and Mary, and we update them later. However, this technique requires
more programming effort, and it does not work if the attributes cannot be set to null.


              Complex Check Conditions and Assertions
There are additional constructs in the SQL standard for specifying integrity constraints
that are not currently supported by most systems. We discuss some of these in this
section.

As defined by the SQL standard, the predicate in the check clause can be an ar-
bitrary predicate that can include a subquery. If a database implementation supports
subqueries in the check clause, we could specify the following referential-integrity con-
straint on the relation section:

                check (time slot id in (select time slot id from time slot))

The check condition verifies that the time slot id in each tuple in the section relation is
actually the identifier of a time slot in the time slot relation. Thus, the condition has to
be checked not only when a tuple is inserted or modified in section, but also when the
relation time slot changes (in this case, when a tuple is deleted or modified in relation
time slot).

Another natural constraint on our university schema would be to require that every
section has at least one instructor teaching the section. 
In an attempt to enforce this,
we may try to declare that the attributes (course id, sec id, semester, year) of the section
relation form a foreign key referencing the corresponding attributes of the teaches rela-
tion. Unfortunately, these attributes       do not form a candidate key       of the relation teaches.

A check constraint similar to that for the time slot attribute can be used to enforce this
constraint, if check constraints with subqueries were supported by a database system.
Complex check conditions can be useful when we want to ensure the integrity of
data, but they may be costly to test. In our example, the predicate in the check clause
would not only have to be evaluated when a modification is made to the section relation,
but it may have to be checked if a modification is made to the time slot relation because
that relation is referenced in the subquery.

An assertion is a "predicate" expressing a condition that we wish the database always
to satisfy. Consider the following constraints, which can be expressed using assertions.

      • For each tuple in the student relation, the value of the attribute tot_cred must equal
      the sum of credits of courses that the student has completed successfully.
      • An instructor cannot teach in two different classrooms in a semester in the same
      time slot. 

          create assertion credits_earned_constraint check
          (not exists (select ID
              from student
              where tot_cred <> (select coalesce(sum(credits), 0)
                    from takes natural join course
                    where student.ID= takes.ID
                    and grade is not null and grade<> ’F’ )))

An assertion in SQL takes the form:
          create assertion <assertion-name> check <predicate>;

When an assertion is created, the system tests it for validity. If the assertion is valid,
then any future modification to the database is allowed only if it does not cause that
assertion to be violated. This testing may introduce a significant amount of overhead
if complex assertions have been made. Hence, assertions should be used with great
care. The high overhead of testing and maintaining assertions has led some system
developers to omit support for general assertions, or to provide specialized forms of
assertion that are easier to test.

Currently, none of the widely used database systems supports either subqueries in
the check clause predicate or the create assertion construct. However, equivalent func-
tionality can be implemented using triggers, which are described in Section 5.3, if they
are supported by the database system. Section 5.3 also describes how the referential
integrity constraint on time slot id can be implemented using triggers.


                SQL Data Types and Schemas
In Chapter 3, we covered a number of built-in data types supported in SQL , such as
integer types, real types, and character types. There are additional built-in data types
supported by SQL , which we describe below. We also describe how to create basic
user-defined types in SQL .


                  Date and Time Types in SQL
In addition to the basic data types we introduced in Section 3.2, the SQL standard
supports several data types relating to dates and times:
        
        • date: A calendar date containing a (four-digit) year, month, and day of the month.
        • time: The time of day, in hours, minutes, and seconds. A variant, time(p), can be
              used to specify the number of fractional digits for seconds (the default being 0).
              It is also possible to store time-zone information along with the time by specifying
              time with timezone.
        • timestamp: A combination of date and time. A variant, timestamp(p), can be used
              to specify the number of fractional digits for seconds (the default here being 6).

Time-zone information is also stored if with timezone is specified.

Date and time values can be specified like this:
        
        date '2018-04-25'
        time '09:30:00'
        timestamp '2018-04-25 10:29:01.45'

Dates must be specified in the format year followed by month followed by day, as
shown. The seconds field of time or timestamp can have a fractional part, as in the
timestamp above.

To extract individual fields of a date or time value d, we can use extract (field from
d), where field can be one of year, month, day, hour, minute, or second. 

Time-zone information can be extracted using timezone hour and timezone minute.
SQL defines several functions to get the current date and time. 

For example, 
      current date returns the current date
      current time returns the current time (with timezone)
      localtime returns the current local time (without time zone)
      Timestamps (date plus time) are returned by current timestamp (with time zone)
      localtimestamp (local date and time without time zone).

Some systems, including MySQL offer the datetime data type that represents a time
that is not adjustable for time zone. In practice, specification of time has numerous
special cases, including the use of standard time versus “daylight” or “summer” time.
Systems vary in the range of times representable.

SQL allows comparison operations on all the types listed here, and it allows both
arithmetic and comparison operations on the various numeric types. SQL also provides
a data type called interval, and it allows computations based on dates and times and
on intervals. For example, if x and y are of type date, then x − y is an interval whose
value is the number of days from date x to date y. Similarly, adding or subtracting an
interval from a date or time gives back a date or time, respectively.




                      
